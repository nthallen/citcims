Note: As of the flight-2.5.28.tar.gz distribution, json_ext assumes that
inetd is running on the same node as TMbfr and memo. An update is underway
that attempts to make fewer assumptions.

Configuration for JSON connection to Matlab:
  QNX:
    Edit /etc/inetd.conf and add the following:

      http stream tcp nowait nort /usr/local/bin/json_ext \
      json_ext /home/tof ToFjsonext

    (that should be all on one line without the end-of-line escape)

    This instructs inetd to listen on port 80 (HTTP) for connections
    from Matlab and run the json_ext script. Another port (service)
    could be used, but Windows firewall might be less accomodating.

    Now start inetd:

      sudo /usr/sbin/inetd

    Alternatively, you can add /usr/sbin/inetd to /etc/rc.d/rc.local
    in order to start it up everytime you boot up.

    Now run the acquisition:

      cd /home/tof
      ./doit

    Or playback an earlier session:

      cd /home/tof
      ./doit -p 121005.1

    Then go to your Matlab machine:

  Windows/Matlab:

    Edit rtui_ToF.m and set the hostname and hostport values
    to match the settings for inetd on QNX.

    run:

      rtui_ToF

    Select the 'Run' button to establish the connection with QNX
    and start recording data. Selecting 'Run' a second time will
    close the connection.

    Select 'Export' to export the standard data structures into
    the base workspace.

rtui_ToF is an example application. With the exception of the
update_graphics() function, it is entirely generic, and will
work with any experiment stream generated by edf2ext using
'json' instead of 'csv' or 'spreadsheet'. All the elements of the
GUI interface are generic except for the axes, which are referenced
by the update_graphics() function. The plot of TPA_Cmon and TPB_Cmon
is simply an example to demonstrate that data is coming in.
The GUI can be modified to add additional elements which could
be updated from the update_graphics() function.
or remove elements
