TM typedef signed long oms_step_t { text "%9ld"; }
TM typedef unsigned char oms_stat_t { text "%5u" oms_stat_text(); }

%{
  static const char *oms_stat_graph[] = {
    " <- ",
    " <-H",
    "|<- ",
    "|<-H",
    " <  ",
    " < H",
    "|<  ",
    "|< H",
    "->  ",
    "-> H",
    "->| ",
    "->|H",
    " >  ",
    " > H",
    " >| ",
    " >|H"
  };
  static const char *oms_stat_text(oms_stat_t s) {
    return oms_stat_graph[s & 0xF];
  }
%}

/* TM 5 Hz oms_step_t OMS_0_Step; */
 TM 5 Hz oms_step_t Insl_Step; 
/* TM 5 Hz oms_step_t OMS_2_Step; */
/* TM 5 Hz oms_step_t OMS_3_Step; */
/* TM 5 Hz oms_stat_t OMS_0_Stat; */
 TM 5 Hz oms_stat_t Insl_Stat; 
/* TM 5 Hz oms_stat_t OMS_2_Stat; */
/* TM 5 Hz oms_stat_t @OMD3@_Stat; */
TM 5 Hz UCHAR OMS_Stale;

TM "Receive" OMS_status 1;

Group OMS_Stat (Insl_Step, Insl_Stat, OMS_Stale ) {
  /* OMS_0_Step = OMS_status.step[0]; */
   Insl_Step = OMS_status.step[1]; 
  /* OMS_2_Step = OMS_status.step[2]; */
  /* OMS_3_Step = OMS_status.step[3]; */
  /* OMS_0_Stat = OMS_status.status[0]; */
   Insl_Stat = OMS_status.status[1]; 
  /* OMS_2_Stat = OMS_status.status[2]; */
  /* OMS_3_Stat = OMS_status.status[3]; */
  OMS_Stale = OMS_status_obj->stale(255);
  OMS_status_obj->synch();
}
