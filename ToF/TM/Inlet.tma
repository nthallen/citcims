Partition
# Partition 11:  Inlet pressure control


%{
  /* Inlet_PControl implements a simple PI controller
     on the inlet motor.
     8 Hz V100torr_t InL_P: Inlet Pressure
     1 Hz V100torr_t InPset: Pressure Setpoint
     1 Hz SWStatf InP_Pgain: Proportional Gain
     1 Hz SWStatf InP_Igain: Integral Gain

     We will integrate error for a second before
     taking action.
  */
  int Inlet_Dir = 1;
  #include "nortlib.h"
  #include "math.h"

  #define INLET_DRIVE 'Y'
  #define I_MAX 5000.

  float ILIMIT( float x ) {
    return x > I_MAX ? I_MAX : x < -I_MAX ? -I_MAX : x;
  }
  long SLIMIT( float x ) {
    unsigned short s;
    s = (unsigned short)
      ( x > 800 ? 800 : x < 0 ? 0 : x );
    return s;
  }

  static int not_playback;
  void playback_init( void ) {
    const char *s = ci_time_str();
    not_playback = *s == '\0';
  }

  void oms_drive( char drv, long steps ) {
    if (not_playback)
      ci_sendfcmd( 2, "OMS Drive %c Out %ld\n", drv, steps );
  }
%}

State Inlet_Init {
  +1 > OMS Preset Inlet Slit Position 500
     > OMS Set Inlet Slit Speed 250
     > Inlet Pressure Setpoint 35.0
     > Inlet Pgain .01525
     > Inlet Igain .005
  +5 { playback_init(); }
  +1 Validate Inlet_Close;
}

State Inlet_Close {
    > OMS Drive Inlet Slit to 500
    { Inlet_Dir = 1; }
 +5 Validate Inlet_Closed;    
}

State Inlet_Closed { }

{ double Psum, Isum, FT_P, FT_SP;
  long In_St1; 
  long In_St2;
  long In_St3;
  long In_St4;
  long histor_1;
  V100torr_t InPset_; InPset_ = InPset;
  Psum += InPset_ - InL_P;
}


State Inlet_PControl {
     > oms set inlet slit speed 1200
     > oms drive inlet slit to 1350
  +2 Validate Inlet_PControl_real;
}

State Inlet_PControl_real {
  depending on (Shutdown) { Validate Inlet_Close; }
  depending on (Quick_Shutdown) { Validate Inlet_Close; }

  {
    int Insl_Step1; 
    int pstep_gain;
    pstep_gain = ceil(convert(InH_P)/400);
    Insl_Step1 = Insl_Step;
    histor_1 = 200;
    In_St1 = 10;
    In_St2 = 3;
    In_St3 = 2;
    In_St4 = 1;
    FT_P = convert(InL_P);
    FT_SP = convert(InPset);

    if ( FT_P < 0.988*FT_SP ) { 
      if (FT_P < FT_SP*0.988 &&
          Inlet_Dir == 1 &&
          Insl_Step1 < 6000) {
        oms_drive( 'Y', histor_1);
        Insl_Step1+=histor_1;
        Inlet_Dir=0;
      } else if ( FT_P < FT_SP*0.710 &&
                  Inlet_Dir == 0 &&
                  Insl_Step1 < 6000 ) {
        oms_drive( 'Y', In_St1);
        Insl_Step1 += In_St1;
      } else if ( FT_P >= FT_SP*0.710 &&
                  FT_P < 0.980*FT_SP &&
                  Inlet_Dir == 0 &&
                  Insl_Step1 < 6000 ) {
        oms_drive( 'Y', In_St2);
        Insl_Step1 += In_St2;
      } else if ( FT_P >= FT_SP*0.980 &&
                  FT_P < 0.988*FT_SP &&
                  Inlet_Dir == 0 &&
                  Insl_Step1 < 6000 ) {
        oms_drive( 'Y', In_St3);
        Insl_Step1 += In_St3;
      } else if ( FT_P >= 0.988*FT_SP &&
		  FT_P < 0.994*FT_SP &&
		  Inlet_Dir == 0 &&
		  Insl_Step1 < 6000 ) {
	oms_drive( 'Y', In_St4);
	Insl_Step1 += In_St4;
      }

    } else if (FT_P > 1.012*FT_SP) {
      if ( FT_P > FT_SP*1.012 &&
           Inlet_Dir == 0 &&
           Insl_Step1 > 800) {
        oms_drive( 'Y', -histor_1);
        Insl_Step1-=histor_1;
        Inlet_Dir=1;
      } else if ( FT_P > 1.290*FT_SP &&
                  Inlet_Dir == 1 &&
                  Insl_Step1 > 800) {
        oms_drive( 'Y', -In_St1);
        Insl_Step1 -= In_St1;
      } else if ( FT_P > 1.020*FT_SP &&
                  FT_P <= 1.290*FT_SP &&
                  Inlet_Dir == 1 &&
                  Insl_Step1 > 800) {
        oms_drive( 'Y', -In_St2);
        Insl_Step1 -= In_St2;
      } else if ( FT_P > 1.012*FT_SP &&
                  FT_P <= 1.020*FT_SP &&
                  Inlet_Dir == 1 &&
                  Insl_Step1 > 800) {
        oms_drive( 'Y', -In_St3);
        Insl_Step1 -= In_St3;
      } else if ( FT_P > 1.006*FT_SP &&
		  FT_P <= 1.012*FT_SP &&
		  Inlet_Dir == 1 &&
		  Insl_Step1 > 800) {
	oms_drive( 'Y', -In_St4);
	Insl_Step1 -= In_St4;
      }
    }
  }
}

State Inlet_Lab { }
