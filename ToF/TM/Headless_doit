#! /bin/ksh
#ifdef __USAGE
#%C
#%C start
#  Starts Instrument operation with no other local interaction
#%C stop
#  Send Quit command to running system
#%C not
#  Shuts down any straggling processes after system has stopped
#endif

umask 2
. ./Experiment.config
[ -z "$Experiment" ] && Experiment=none
export Experiment

function nl_error {
  echo Headless_doit: $* >&2
  exit 1
}

[ -n "$HomeDir" ] ||
  nl_error "HomeDir undefined in Experiment.config"
[ -z "$CltHomeDir" ] && CltHomeDir=$HomeDir
dir=$PWD
nnd=${dir%$CltHomeDir}
[ "$dir" = "$nnd" ] &&
  nl_error "Not in CltHomeDir $CltHomeDir"
if [ -n "$nnd" ]; then
  nd=${nnd#/net/}
  [ "$nd" = "$nnd" ] &&
    nl_error "Not in CltHomeDir $CltHomeDir (2)"
  [ "$nd" = "${nd#*/}" ] ||
    nl_error "Not in CltHomeDir $CltHomeDir (3)"
fi

# Parse options to select
#   srcmode as one of realtime, InetIn, SerIn or playback
#   dispmode as one of screen, pterm or photon
session=$$
srcmode=realtime
option=${1:-start}

gcopt=''
if [ $srcmode = realtime -a -n "$FlightNode" ]; then
  FltNd=/net/$FlightNode
  gcopt="-n $FlightNode"
else
  nl_error "FlightNode must be defined"
  FlightNode=`hostname`
  FltNd=""
fi

# logfileroot=$Experiment
batchfile=interact

startup=no
case $option in
  start) startup=yes;;
  stop);;
  not) startup=yes; batchfile=/dev/null;;
  wait) ;;
  screen);;
  *) nl_error "Invalid option: '$option'";;
esac

[ $startup = yes -a -n "$batchfile" -a -z "$SCRIPT_OVERRIDE" ] &&
  nl_error Cannot inhibit or alter startup without SCRIPT_OVERRIDE

# Determine the path. Strictly speaking, this does
# not have to happen before start, but I'd like
# to check that the required applications exist
# VERSION=1.0
# case $srcmode in
#   playback)
#     # Need to find the data
#     ddir=$Run
#     if [ ! -d $ddir ]; then
#       for base in . $FltNd$HomeDir; do
#         ddir=$base/$Run
#         [ -d $ddir ] && break
#         ddir=$base/raw/$Run
#         [ -d $ddir ] && break
#         for runtype in flight cal data junk; do
#           ddir=$base/raw/$runtype/$Run
#           [ -d $ddir ] && break
#         done
#         [ -d $ddir ] && break
#       done
#     fi
#     [ -d $ddir ] || nl_error "Unable to locate run $Run"
#     [ -f $ddir/VERSION ] && VERSION=`cat $ddir/VERSION`;;
#   *)
#     ddir=$FltNd$HomeDir
#     [ -f VERSION ] && VERSION=`cat VERSION`;;
# esac
# 
# TMBINDIR=$PWD/bin/$VERSION
# [ -d $TMBINDIR ] ||
#   nl_error "Unable to locate bin dir for VERSION $VERSION"
# export PATH=$TMBINDIR:$PATH

# function Launch {
#   name=$1
#   shift
#   [ -n "$launch_error" ] && return 1
#   if { $* & }; then
#     Launch_pid=$!
#     echo "Launch: $Launch_pid $*"
#     if [ "$name" != "-" ]; then
#       [ "${name#/}" = "$name" ] && name="/dev/huarp/$Experiment/$name"
#       waitfor $name 10 || {
#         echo "Launch namewait failure: $*" >&2
#         launch_error=yes
#         return 1
#       }
#     fi
#   else
#     echo "Launch Error: $*" >&2
#     launch_error=yes
#     return 1
#   fi
#   return 0
# }

# if [ $srcmode = realtime ]; then
  # SCRIPT_OVERRIDE is the name of a file that will
  # contain the name of the flight script and will
  # be read by flight.sh. Setting it to /dev/null
  # means we can write to it and it won't have any
  # effect.
  # [ -z "$SCRIPT_OVERRIDE" ] && SCRIPT_OVERRIDE=/dev/null
  cmdsrvr=$FltNd/dev/huarp/$Experiment/cmd/server 
  # logfile=$FltNd$HomeDir/$logfileroot.log
# else  # not realtime
#   RemEx=$Experiment
#   Experiment=$RemEx.PB.$session
#   cmdsrvr=/dev/huarp/$Experiment/cmd/server
#   case $srcmode in
#     InetIn) logfile=$logfileroot.II.log;;
#     SerIn) logfile=$logfileroot.SI.log;;
#     *) logfile=$logfileroot.PB.$session.log;;
#   esac
# fi

# override:
#   no: We don't need to override
#   req: Override is required
#   done: Override has been requested
typeset override=no
[ $startup = yes -a $srcmode = realtime -a -n "$batchfile" ] &&
  override=req
if [ $override = req -a -d `dirname $SCRIPT_OVERRIDE` ]; then
  echo $batchfile >$SCRIPT_OVERRIDE
  override=done
fi

if [ ! -d $FltNd/ ]; then
  echo "Waiting for Flight Node $FlightNode"
  while [ ! -d $FltNd/ ]; do
    waitfor $FltNd/ 2>/dev/null
  done
fi
[ -n "$FltNd" ] && echo "Node $FlightNode is on the network"

if [ $override = req ]; then
  if [ -d `dirname $SCRIPT_OVERRIDE` ]; then
    echo $batchfile >$SCRIPT_OVERRIDE
    override=done
  else
    nl_error "SCRIPT_OVERRIDE path not found: '$SCRIPT_OVERRIDE'"
  fi
fi

typeset waiting=no
typeset signaled=no
typeset fltshstarted=no
while true; do
  typeset see_parent=no
  # np < 2 means parent is not running
  ppid=`pidin -n $FlightNode -p parent -fa 2>/dev/null | grep -v pid`
  [ -n "$ppid" ] && see_parent=yes
  if [ $see_parent = yes -o -z "$FltNd" ]; then
    if [ ! -e $cmdsrvr ]; then
      if [ $see_parent = yes ]; then
        if [ $override = done -a ! -f $SCRIPT_OVERRIDE ]; then
          if [ $option = not ]; then
            exit 0
          else
            nl_error "Override observed but startup apparently failed"
          fi
        fi
        [ $override = auto ] &&
          nl_error "Default startup apparently failed"
        if [ $signaled = yes ]; then
          echo "ppid = '$ppid' cmdsrvr = '$cmdsrvr'"
          nl_error "Parent w/o cmdsrvr after signaling"
        fi
      fi
      if [ $startup = yes ]; then
        [ $override = no ] && override=auto
        if [ $see_parent = yes ]; then
          # echo signaling parent
          sudo /usr/local/sbin/signal_parent $FlightNode
          signaled=yes
          oppid=$ppid
          ppid=`pidin -n $FlightNode -p parent -fa 2>/dev/null | grep -v pid`
          nw=1
          while [ -n "$ppid" -a "$ppid" = "$oppid" ]; do
            [ $nw -ge 3 ] &&
              nl_error Signaling parent failed
            sleep 1
            ppid=`pidin -n $FlightNode -p parent -fa 2>/dev/null | grep -v pid`
            let nw=nw+1
          done
          [ -z "$FltNd" -a $option = not ] && exit 0
        elif [ $srcmode = realtime ]; then
          nl_error "Headless operation without FlightNode not supported"
          if [ $fltshstarted = no ]; then
            if [ $dispmode = screen ]; then
              echo "Starting flight.sh on /dev/con1"
              on -t /dev/con1 /usr/local/sbin/flight.sh &
            else
              tty=`tty`
              echo "Starting flight.sh in a pterm"
              on -t $tty pterm /usr/local/sbin/flight.sh &
            fi
            fltshstarted=yes
          fi
        else
          nl_error "Headless playback/InetIn not supported"
          Launch memo memo -o $logfile 
          Launch TM/DCo TMbfr
          if [ $srcmode = playback ]; then
            Launch DG/cmd rdr -P $ddir -a
          elif [ $srcmode = InetIn ]; then
            Launch DG/cmd InetIn
          fi
          Launch cmd/server $lclsrvr
          if [ -n "$launch_error" ]; then
            echo "Launch failed: cleaning up"
            exec parent -qt1
          fi
        fi
      elif [ $option = stop ]; then
        nl_error "Could not locate $Experiment's command server"
      fi
    fi
  fi

  if [ -e $cmdsrvr ]; then
    case $option in
      not)
        nl_error "Instrument is in operation: quit first";;
      stop)
        echo "Quit" >$cmdsrvr
        exit 0;;
      start) break;;
      wait) break;;
      screen) break;;
      *) nl_error "Unrecognized option '$option'";;
    esac
  fi

  if [ $waiting = no ]; then
    echo "Waiting for parent or command server on node $FlightNode"
    waiting=yes
  fi
  sleep 1
done

if [ $override = done -a -f $SCRIPT_OVERRIDE ]; then
  echo "Override script '$batchfile' not honored, removing"
  rm -f $SCRIPT_OVERRIDE
fi
