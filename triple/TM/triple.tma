# May, 2012: mods for DC3 JSC
#
#
%{
  #include <fcntl.h>
  #include "SWStat.h"
  #include "msg.h"
  #include "SWData.h"
  #include "address.h"
  #ifdef SERVER
    SWData_t SWData;
    void send_to_tof(const char *cmd) {
      int fd, nb_in, nb;
      fd = open("/net/tofherc/dev/huarp/ToF/cmd/server", O_WRONLY|O_NONBLOCK);
      if (fd < 0) {
        nl_error(2, "Unable to contact ToF command server");
        return;
      }
      nb_in = strlen(cmd);
      nb = write(fd, cmd, nb_in);
      if (nb < 0) {
       nl_error(2, "Error writing to ToF command server: %s", strerror(errno));
      } else if (nb < nb_in) {
         n1_error(2, "Incomplete write to ToF: wrote %d of %d", nb, nb_in);
      }
      close(fd);
   }
 #endif
%}

# Partition 1   Startup, shutdown

State Init {
  > Telemetry Start
  >	1200 Enable A off
  >	1200 Enable B off
  +2 validate zaber_close;

  +1 hold until valid (zaber_idle);
  +1 Validate cal_off;
  +1 hold until valid (cal_idle);
#  +2 Validate power_watchdog; #here for testing only 
##scrubair command here for chamber only
#  +1 > scrubair valve close	
   validate polj_idle;
   validate Init_idle;
}


State Init_continue {

   { msg(0, "I am in init continue"); }

#+10 > CIMS Set ambient zero flow rate 0.100

   +1 { if ( convert(Pressure100T) > 80 ) { Validate Manual_init; } }
   +1 > turbo rough pump on
   +1 > turbo valve open
  +1 > flowtube pump on
#  +1 > Dewar valve close
#  +2 Validate dewar_watchdog; 
#  +2 Validate power_watchdog;
  +2 > flowtube valve open
  +1 hold until ( convert(Pressure100T) < 10 );
#		# next line energizes ReagentMFC vent valve
#  +1 > ionsourceMFC open on
  +2 Validate flows_n2_zero;
#	{ msg(0,"holding for flows idle"); }
  +1 hold until valid (flows_idle);
	{ msg(0, "holding for D1200A == 1"); }
  +1 hold until ( D1200A | (H_DIO_D*0) );
    { msg(0, "opening zaber"); }
  +1 validate zaber_open;
  +1 hold until valid (zaber_monitor);
  +1 > 1200 Enable A on
#  +1 hold until ( (!D1200A) | (H_DIO_D*0) );    
#  +1 validate NegDryCalScan;
#   { msg(0,"NegDryCalScan before dither three");}	
#  +1 hold until valid ( collect_idle);
   +5 validate dither_one;
# pol_neg is just for chamber runs
#  +1 validate pol_neg;
#   { msg(0, "I got to the end of initcontinue"); }
}

State Init_idle {
 { msg(0, "I am in init idle"); }
}

State Manual_init {
	"Flowtube pressure too high, please open vent, and turn pumps on manually.";
  { msg(0, "I am in Manual Init.  Flow tube P too high."); }
}

State Shutdown {
#	> turbo valve close
	validate dither_shutdown;
  +1 hold until valid (dither_idle);
      validate zaber_close;
  +1 hold until valid (zaber_idle);
     > scrubair valve close
     > normal cal bypass bypass
     > labelled cal bypass bypass
  +1 > set dilution flow 0 sccm
  +1 > set reagent flow 0 sccm
  +1 > set Ion source flow 0 sccm
#  +1 > set Scrub MFC 0
  +2 > turbo valve close
  +2> turbo rough pump off
	{ msg(0, "Here1"); }
  +2 > flowtube valve close
	{ msg(0, "Here2"); }
	Validate dewar_watchdog_gotosleep;
  +6	{ msg(0, "Here3"); }
#  +5 { if (convert(Pressure100T) > 1) { validate Shutdown_failed; } }
#  +1 > dewar valve open
  +1 > flowtube pump off
  +2 > Quit
}

State Shutdown_failed {
	{ msg(0, "Apparent Leak - are zabers shut?"); }
	{ msg(0, "Find leak, then open flowtube valve"); }
	hold until (convert(Pressure100T) < 0.75);
   > flowtube valve close
	{ msg(0, "Here4"); }
  +6	{ msg(0, "Here5"); }
  +5 { if (convert(Pressure100T) > 1) { validate Shutdown_failed; } }
  +1 > dewar valve open
  +1 > flowtube pump off
  +2 > Quit
}

Partition
# Partition 2: SWStat control
################################################################
# SWStat control
################################################################
State SW_Stat_Wait {
  { int reset_it;
    reset_it = 1;
    switch (SWStat) {
      default:
      case 0: reset_it = 0; break;
      case SWS_LAB_READ: Validate Lab_read; break;
      case SWS_SHUTDOWN: Validate Shutdown; break;
      case SWS_INLET_IDLE: Validate Inlet_Idle; break;
      case SWS_INLET_PRESSURE: Validate Inlet_PControl; break;
      case SWS_DITHER_ONE: Validate dither_one; break;
      case SWS_DITHER_TWO: Validate dither_two; break;
	  case SWS_DITHER_THREE: Validate dither_three; break;
      case SWS_TRIP_SUS: Validate dither_standby; break;
	  case SWS_DITHER_END: Validate dither_end; break;
      case SWS_SCRUB_READY: Validate scrub_ready; break;
      case SWS_INIT_CONTINUE: Validate Init_continue; break;
      case SWS_AUTOCALTRIPLE_START: Validate autocal_start; break;
      case SWS_AUTOCALTRIPLE_STOP: Validate autocal_stop; break;
      case SWS_SITON_NEG_DATAwMHP: Validate NegDataHop_wMHP; break;
      case SWS_SITON_NEG_DRYZERO: Validate NegDryZeroHop; break;
      case SWS_SITON_NEG_DRYCAL: Validate NegDryCalHop; break;
      case SWS_SITON_NEG_AMBZERO: Validate NegAmbZeroHop; break;	

	 }
    if (reset_it) Validate SW_Stat_Reset;
  }
}

State SW_Stat_Reset {
  > SW Status Set 0
  Hold until (SWStat == 0) or 10;
  Validate SW_Stat_Wait;
}

Partition
# Partition 3: Lab File Input
################################################################
# Lab file input
################################################################
State Lab_idle {
}

State Lab_read "triple.tmas" {
  Validate Lab_idle;
}

Partition
################################################################
# Partition 4: controls negative and positive issues
#  this partition controls reagent gas and polarity bit sensed
#  by 1200.  It does NOT control Source Voltage!  (See partition 25)
################################################################

State Pol_idle {
}

State Pol_Negative {
#	> Reagent Valve Close
# next line makes 1200 go negative 
#+5	> DiluteMFC open off   #080604 removed to use bit for cal mass call
    > Set reagent flow 0.2 sccm
+2  Validate Pol_idle;
}

State Pol_Positive {
##	> Reagent Valve Open
# next line makes 1200 go positive 
##+5	> DiluteMFC open on
##    > Set reagent 0
##+2  Validate Pol_idle;
}

Partition
##############################################################
# Partition 5: Dewar Watchdog
# turns off all flows if dewar valve opens
# good for power outages, etc
##############################################################

State dewar_watchdog_gotosleep {
}

State dewar_watchdog {
    {msg(0,"entering dewar watchdog");}
+1 hold until ( (!fan2) || !(H_DIO_D&32) ); #fan2 (dwr vlv)=HDIO byte D bit 5
    Validate Init_idle;
	Validate flows_off;
	{msg(0,"DEWAR WATCHDOG turned off all flows");}
+1	hold until valid (flows_idle);
	{msg(0,"Close (turn on) Dewar valve before turning on flows");}
+1 Validate dewar_watchdog_gotosleep;
}

State dewar_standby {
# this state needs thought...maybe never use...
   hold until ((fan2) | (H_DIO_D*5));
+2 hold until ((fan2) | (H_DIO_D*5)); 
   Validate dewar_watchdog;
}

#Partition
##############################################################
# Partition 5 B: Dilute MFC watchdog for KORUS
# resets DiluteMFC setpoint if the flows sagging/stuck
##############################################################  

#{ double dilread, dilsp;
#}

#State dilution_watchdog {
#   double dilread, dilsp;
#   dilread = convert(DiluteMFC);
#   dilsp = convert(DiluteMFC);
#3   
#    if (dilread < .98*dilsp) {
#    > Set Dilute MFC 0;
#    { +1 ci_sendfcmd (0, "set dilute MFC %ld\/n",dilsp);}
#     {msg(0,"Dilute MFC Watchdog reset DiluteMFC");} 
#     +1 Validate dilution_watchdog;
# } else if (dilread > .98*dilsp){
# +1 Validate dilution_watchdog;
# }
#}

#State dilution_watchdog_sleep {
#}


Partition
##############################################################
# Partition 5.2 for BEARPEX (090528): turn off instrument if 
# power at tower fails 
##############################################################

State power_watchdog_gotosleep {
}

State power_watchdog {
	{msg(0,"entering power_watchdog");}
+1  hold until (!(H_DIO_D*7));
	 {msg(0,"I am inside powerwatchdog shutdown");}
+1	 > zaber command all drives 1 1
+1	 > turbo valve close
+1   > set dilution flow 0 sccm
+1	 > set reagent flow 0 sccm
+1	 > set ion source flow 0 sccm
+1	 Validate Shutdown;
}
	 
Partition 
##############################################################
# Partition 6: hopper: scan or hop negotiation with 1200
# Set flows, polarity, then use these states to GO!
##############################################################

State hop_scan_idle {
}

State hop_start {
	hold until (D1200A || (H_DIO_D&1));
	Validate zaber_open;
+1	hold until valid (zaber_monitor);
+2	> 1200 Enable B off
+1  > 1200 Enable A on
+1	hold until (D1200B || (H_DIO_D&2));  # hold til scan begins
	Validate hopping;
}

State hopping {
}

State hop_finish {
		# stop hopping
#	> 1200 Enable B on
+1	hold until ( (!D1200B) || !(H_DIO_D&2) );    # confirmation from 1200
	> 1200 Enable B off
	> 1200 Enable A off
#	Validate HV_off;    #commented out for sharing voltage w/ tof
	Validate hop_scan_idle;
}

State scan_go {
	hold until (D1200A || (H_DIO_D&1));
	Validate zaber_open;
+1	hold until valid (zaber_monitor);
+2	> 1200 Enable B on
+1  > 1200 Enable A on
+1	hold until (D1200B || (H_DIO_D&2));  # hold til scan begins
+1      > 1200 Enable B off
+2	hold until ( (!D1200B) || !(H_DIO_D&2) );    # Done with Scan
+1	> 1200 Enable A off
+1	Validate HV_off;
+1	Validate hop_scan_idle;
}

Partition
##############################################################
# Partition 7: various data collection states
##############################################################

State collect_idle {
}

State NegDataHop_wMHP {
	Validate Pol_Negative;
+1	hold until valid (Pol_idle);
+2  Validate flows_measure;
+1  hold until valid (flows_idle);
	Validate cal_MHP;
+1  hold until valid (cal_idle);
+1  Validate Neg_HV_on;
+1  hold until valid (Neg_HV_monitor);
	Validate hop_start;
+1 	hold until valid (hopping);
	{msg(0,"In Neg Data Hop w m136 MHP");}
+1  hold until valid (scrub_ready); #uncomment for op w/ tof
	> DiluteMFC open on
#+1200	was used above during trip solo ops
	Validate hop_finish;
+1  hold until valid (hop_scan_idle);
	Validate cal_off;
+1  hold until valid (cal_idle);
	{msg(0,"Leaving Neg Data Hop");}	
	> DiluteMFC open off
	Validate collect_idle;
}

State NegDataHop {
	Validate Pol_Negative;
+1	hold until valid (Pol_idle);
+2  Validate flows_measure;
+1  hold until valid (flows_idle);
	Validate cal_off;
+1  hold until valid (cal_idle);
+1  Validate Neg_HV_on;
+1  hold until valid (Neg_HV_monitor);
	Validate hop_start;
+1 	hold until valid (hopping);
	{msg(0,"In Neg Data Hop");}
+1   hold until valid (scrub_ready); #uncomment for op with single
	> DiluteMFC open on
# above line was +1000 for trip solo op 
	Validate hop_finish; # remove the + time (200) for op with single
+1  hold until valid (hop_scan_idle);
	{msg(0,"Leaving Neg Data Hop");}	
	> DiluteMFC open off
	Validate collect_idle;
}

State NegDataScan {
    Validate Pol_Negative;
+1  hold until valid (Pol_idle);
+2	Validate flows_measure;
+1	hold until valid (flows_idle);
        Validate cal_MHP;
+1   hold until valid (cal_idle);
+1	Validate Neg_HV_on;
+1	hold until valid (Neg_HV_monitor);
	Validate scan_go;
	{msg(0,"In Neg Data Scan");}
+1  hold until valid (hop_scan_idle);
     Validate cal_off;
+1 hold until valid (cal_idle);
	{msg(0,"Ending Neg Data Scan");}
+1	validate collect_idle;
}


State NegDryZeroHop {
	Validate Pol_Negative;
+1	hold until valid (Pol_idle);
+2  Validate flows_n2_zero;
+1  hold until valid (flows_idle);
+1  Validate Neg_HV_on;
+1  hold until valid (Neg_HV_monitor);
	Validate hop_start;
+1 	hold until valid (hopping);
	{msg(0,"In Neg DryZ Hop");}
+60 > DiluteMFC open on
	Validate hop_finish; # (had +100) change back to 150 after test
+1  hold until valid (hop_scan_idle);
+1 Validate scrub_ready_wait;
+1 	hold until valid(scrub_ready_wait); 
	{msg(0,"quitting Neg DryZ Hop");}
	> DiluteMFC open off
#	> Set dilute MFC 0
+1	Validate collect_idle;
}

State NegDryZeroScan {
    Validate Pol_Negative;
+1  hold until valid (Pol_idle);
+2	Validate flows_n2_zero;
+1	hold until valid (flows_idle);
+1	Validate Neg_HV_on;
+1	hold until valid (Neg_HV_monitor);
	Validate scan_go;
	{msg(0,"In Neg DryZ Scan");}
+1  hold until valid (hop_scan_idle);
	{msg(0,"done with Neg DryZ Scan");}
+1	validate collect_idle;
}

State NegDryCalScan {
  Validate Pol_Negative;
  +1 hold until valid (Pol_idle);
  +2 Validate flows_n2_cal;
  +1 hold until valid (flows_idle);
  Validate Cal_on;
+1 hold until valid (cal_idle);	
  +1 Validate Neg_HV_on;
  +1 hold until valid (Neg_HV_monitor);
  +1	Validate scan_go;
  {msg(0,"NegDryCalScan should be scanning");}
  +1 hold until valid (hop_scan_idle);
  {msg(0,"NegDryCalScan is over...");}


  +1 validate collect_idle;
  +1 Validate NegCalReturn;
}

State NegCalReturn {
}

State LongCalComb {
	Validate Pol_Negative;
+1  hold until valid (Pol_idle);
	Validate flows_n2_cal;
+1  hold until valid (flows_idle);
    Validate Cal_on;
+1	hold until valid (cal_idle);
+1 	Validate Neg_HV_on;
+1  hold until valid (Neg_HV_monitor);
	Validate hop_start;
+1	hold until valid (hopping);
	{msg(0,"In Neg DryCal Hop");}
+600 > DiluteMFC open on
+200 Validate hop_finish;
+1  hold until valid (hop_scan_idle);
	> DiluteMFC open off
	Validate flows_amb_cal;
+1	hold until valid (flows_idle);
	Validate Neg_HV_on;
+1	hold until valid (Neg_HV_monitor);
	Validate hop_start;
	{msg(0,"In Neg AmbCal Hop 1");}
+600 > DiluteMFC open on
+200 Validate hop_finish;
+1  hold until valid (hop_scan_idle);
	> DiluteMFC open off
	Validate flows_amb_caltwo;
+1	hold until valid (flows_idle);
	Validate Neg_HV_on;
+1  hold until valid (Neg_HV_monitor);
	Validate hop_start;
	{msg(0,"In Neg AmbCal Hop 2");}
+600 > DiluteMFC open on
+200 Validate hop_finish;
+1  hold until valid (hop_scan_idle);
	> DiluteMFC open off
	Validate flows_amb_calthree;
+1	hold until valid (flows_idle);
	Validate Neg_HV_on;
+1	hold until valid (Neg_HV_monitor);
	Validate hop_start;
	{msg(0,"In Neg AmbCal Hop 3");}
+600 > DiluteMFC open on
+200 Validate hop_finish;
+1  hold until valid (hop_scan_idle);
	> DiluteMFC open off
	Validate Cal_off;
	hold until valid (cal_idle);
	Validate scrub_out_tripsolo;
	hold until valid (scrub_idle);
	{msg(0,"I'm done doing the long cal");}
	Validate collect_idle;
}

State NegCalHopStart {
	Validate Pol_Negative;
+1  hold until valid (Pol_idle);
	Validate flows_n2_cal;
+1  hold until valid (flows_idle);
    Validate Cal_on;
+1	hold until valid (cal_idle);
+1 	Validate Neg_HV_on;
+1  hold until valid (Neg_HV_monitor);
	Validate hop_start;
+1	hold until valid (hopping);
	{msg(0,"In Neg DryCal Hop");}
	Validate NegCalReturn;
}

State NegCalHoptime {
+600 > DiluteMFC open on
+200 Validate hop_finish;
+1  hold until valid (hop_scan_idle);
	Validate NegCalReturn;
} 

State NegCalHopAmbOne {
	Validate flows_amb_cal;
+1	hold until valid (flows_idle);
	Validate Neg_HV_on;
+1	hold until valid (Neg_HV_monitor);
	Validate hop_start;
	{msg(0,"In Neg AmbCal Hop 1");}
	Validate NegCalReturn;
}

State NegCalHopAmbTwo {
	Validate flows_amb_caltwo;
+1	hold until valid (flows_idle);
	Validate Neg_HV_on;
+1  hold until valid (Neg_HV_monitor);
	Validate hop_start;
	{msg(0,"In Neg AmbCal Hop 2");}
	Validate NegCalReturn;
}

State NegCalHopAmbThree {
	Validate flows_amb_calthree;
+1	hold until valid (flows_idle);
	Validate Neg_HV_on;
+1	hold until valid (Neg_HV_monitor);
	Validate hop_start;
	{msg(0,"In Neg AmbCal Hop 3");}
	Validate NegCalReturn;
}

State NegCalHop {
	Validate Pol_Negative;
+1	hold until valid (Pol_idle);
	Validate flows_n2_cal;
+1	hold until valid (flows_idle);
	Validate Cal_on;
+1	hold until valid (cal_idle);
+1	Validate Neg_HV_on;
+1	hold until valid (Neg_HV_monitor);
	Validate hop_start;
+1	hold until valid (hopping);
	{msg(0,"In Neg DryCal Hop");}
+120 > DiluteMFC open on
	Validate hop_finish; #change back to 60 after test
+1	hold until valid (hop_scan_idle);
	> DiluteMFC open off
	Validate flows_amb_cal; 
+1	hold until valid (flows_idle);
+1	Validate Neg_HV_on;
+1	hold until valid (Neg_HV_monitor);
	Validate hop_start;
	{msg(0,"In Neg AmbCal Hop");}
+1	hold until valid (hopping);
+120 > DiluteMFC open on
	+1 Validate hop_finish; #change back to 60 after test
+1  	hold until valid (hop_scan_idle);
	> DiluteMFC open off
	Validate Cal_off;
	hold until valid (cal_idle);
	Validate scrub_out;
	hold until valid (scrub_ready_wait);
	{msg(0,"Done with NegCalHop");}
	Validate collect_idle;
}


State NegDryCalHop {
	Validate Pol_Negative;
+1	hold until valid (Pol_idle);
 	Validate flows_n2_cal;
+1  hold until valid (flows_idle);
	Validate Cal_on;
+1  hold until valid (cal_idle);
+1  Validate Neg_HV_on;
+1  hold until valid (Neg_HV_monitor);
	Validate hop_start;
+1 	hold until valid (hopping);
	{msg(0,"In Neg DryCal Hop");}
+120 > DiluteMFC open on
	Validate hop_finish; #change back to 60 after test
+1  hold until valid (hop_scan_idle);
	> DiluteMFC open off
        Validate Cal_off;
	hold until valid (cal_idle);
	{msg(0,"had it with Neg DryCal Hop");}
	Validate collect_idle;
}

State NegDryZeroHop_wMHP {
	Validate Pol_Negative;
+1	hold until valid (Pol_idle);
	Validate flows_n2_mhp;
+1	hold until valid (flows_idle);
	Validate cal_MHP;
+1	hold until valid (cal_idle);
+1	Validate Neg_HV_on;
+1	hold until valid (Neg_HV_monitor);
	Validate hop_start;
+1 	hold until valid (hopping);
	{msg(0,"In NegZeroHop with MHP");}
+120 >	DiluteMFC open on
+60	Validate hop_finish;
+1	hold until valid (hop_scan_idle);
	> DiluteMFC open off
	{msg(0,"done with NegZeroHopwMHP");}

	Validate collect_idle;
}


State NegCalHopEnd {
	Validate Cal_off;
	hold until valid (cal_idle);
	Validate scrub_out_tripsolo;
	hold until valid (scrub_idle);
	{msg(0,"I'm done doing the long cal");}
	Validate collect_idle;
}

State LongCal {
# this state was added to get two things: a stable output of HNO3 
# over a range of H2O to eval. totalF trends, and to get more complete water curves.
	Validate NegCalHopStart;
+1	hold until valid (NegCalReturn);
	Validate NegCalHoptime;
+1	hold until valid (NegCalReturn);
	Validate NegCalHopAmbOne;
+1	hold until valid (NegCalReturn);
	Validate NegCalHoptime;
+1	hold until valid (NegCalReturn);
	Validate NegCalHopAmbTwo;
+1	hold until valid (NegCalReturn);
	Validate NegCalHoptime;
+1	hold until valid (NegCalReturn);
	Validate NegCalHopAmbThree;
+1	hold until valid (NegCalReturn);
	Validate NegCalHoptime;
+1	hold until valid (NegCalReturn);
	Validate NegCalHopEnd;
}


State NegCalHop_AmbOnly {
	Validate Pol_Negative;
+1	hold until valid (Pol_idle);
 	Validate flows_amb_cal;
+1  hold until valid (flows_idle);
+1  Validate Neg_HV_on;
+1  hold until valid (Neg_HV_monitor);
	Validate hop_start;
+1 	hold until valid (hopping);
	{msg(0,"In Neg AmbCaloNLY Hop");}
+30	Validate Cal_on;
+1  hold until valid (cal_idle);
+90 Validate Cal_off;
+1	hold until valid (cal_idle);
+60	Validate hop_finish;
+1  hold until valid (hop_scan_idle);
	Validate scrub_out;  # change for op w/ tof
	hold until valid (scrub_ready_wait);  # change for op w/ tof
	{msg(0,"had it with Neg Cal Hop Amb Only");}
	Validate collect_idle;
}

State NegAmbZeroHop {

	Validate Pol_Negative;
+1	hold until valid (Pol_idle);
+2	Validate flows_amb_zero;
+1	hold until valid (flows_idle);
+1  Validate Neg_HV_on;
+1  hold until valid (Neg_HV_monitor);
	Validate hop_start;
+1 	hold until valid (hopping);
	{msg(0,"In Neg AmbZ Hop");}
+120	> DiluteMFC open on
	Validate hop_finish; #change back to 80 after test
+1  hold until valid (hop_scan_idle);
	Validate scrub_out; #change back to scrub_out_trip_solo w/o tof
	hold until valid (scrub_ready_wait); #switch back with single op.
#	hold until valid (scrub_idle);  #think this is for trip_solo
	{msg(0,"Leaving Neg AmbZ Hop");}
	> DiluteMFC open off
#	> Set dilute MFC 0
	Validate collect_idle;
}


State NegAmbZeroHop_MHPcal {

	Validate Pol_Negative;
+1	hold until valid (Pol_idle);
+2	Validate flows_amb_zero;
+1	hold until valid (flows_idle);
+1  > Normal Cal bypass into system
+1  > Normal Cal scrub bypass
+1  Validate Neg_HV_on;
+1  hold until valid (Neg_HV_monitor);
	Validate hop_start;
+1 	hold until valid (hopping);
	{msg(0,"In Neg AmbZ Hop");}
+80 Validate hop_finish;
+1  hold until valid (hop_scan_idle);
	Validate Cal_off;
+1  hold until valid (cal_idle);
	Validate scrub_out;
		hold until valid (scrub_ready_wait);   # change for op w/ tof
	{msg(0,"Leaving Neg AmbZ Hop");}	
	Validate collect_idle;
}


State NegAmb_Z_Scan {

	Validate Pol_Negative;
+1	hold until valid (Pol_idle);
+2	Validate flows_amb_zero;
+1	hold until valid (flows_idle);
+1	Validate Neg_HV_on;
+1  hold until valid (Neg_HV_monitor);
	Validate scan_go;
+1  hold until valid (hop_scan_idle);
{msg(0,"In Neg Amb Z Scan");}
# do we need  hop finish equivalent here?  Along w/ an idle hold?
	Validate scrub_out;  # change back for op w/ tof
	hold until valid (scrub_ready_wait);	 # change back for op w/ tof
	{msg(0,"Ending Neg Amb Z Scan");}
	> Set dilute MFC 0
	Validate collect_idle;
}


State NegCalScan {

    Validate Pol_Negative;
+1  hold until valid (Pol_idle);
+1	> DiluteMFC open on
+2	Validate flows_n2_cal;
+2	hold until valid (flows_idle);
+2	Validate cal_on;
+5	Validate Neg_HV_on;
+1	hold until valid (Neg_HV_monitor);
+2	> 1200 Enable B on
+1	hold until (D1200B || (H_DIO_D&2));
	> 1200 Enable B off
+2	hold until ( (!D1200B) || !(H_DIO_D&2) );    # Done with Scan
	Validate HV_off;
	> DiluteMFC open on
+1	validate collect_idle;
}



State NegAmb_CalScan {

    Validate Pol_Negative;
+1  hold until valid (Pol_idle);
+1  > DiluteMFC open on
+2	Validate flows_amb_cal;
+2	hold until valid (flows_idle);
+2	Validate cal_on;
+5	Validate Neg_HV_on;
+1	hold until valid (Neg_HV_monitor);
+2	> 1200 Enable B on
+1	hold until (D1200B || (H_DIO_D&2));
	> 1200 Enable B off
+2	hold until ( (!D1200B) || !(H_DIO_D&2) );    # Done with Scan
	Validate HV_off;
	> DiluteMFC open off
+1	validate collect_idle;
}


Partition
##############################################################
# Partition 8: Main dither cycles
# controls how data/cal/zeros are collected
##############################################################

State dither_idle {
}

State dither_two {
	> Telemetry Logging Resume
	> 1200 Enable A off
	> 1200 Enable B off
	
	Validate NegDataHop_wMHP;
	{ msg(0,"Entering Fifth Neg Data Hop"); }
+10	{ msg(0,"Still beginning Fifth Neg Data Hop"); }
+1 	hold until valid (collect_idle);
	
	Validate NegAmbZeroHop;
	{ msg(0,"Entering Third Z (amb) Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering Sixth Neg Data Hop"); }
+10	{ msg(0,"Still beginning Sixth Neg Data Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegAmbZeroHop;
	{ msg(0,"Entering Fourth Z (amb) Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering Seventh Neg Data Hop"); }
+10	{ msg(0,"Still beginning Seventh Neg Data Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegDryZeroHop;
	{ msg(0,"Entering Third DryZ Hop"); }
+1 	hold until valid (collect_idle);

	Validate dither_zero;
}

State dither_one {
	> Telemetry Logging Resume
	> 1200 Enable A off
	> 1200 Enable B off

	Validate NegDryCalScan;
	{ msg(0,"Entering First NegDryCal MassCenter");}
+10	{ msg(0,"Still beginning First NegDryCal MassCenter");}
+1	hold until valid (collect_idle);
 
	Validate NegDryZeroHop;
	{ msg(0,"Entering First DryZ Hop"); }
+1 	hold until valid (collect_idle);
	Validate dither_three;
}


State dither_zero {
	> Telemetry Logging Resume
	> 1200 Enable A off
	> 1200 Enable B off

	Validate NegDataScan;	
	{ msg(0,"Entering 1DMS data scan"); }
+10	{ msg(0,"Still beginning 1DMS data scan"); }
+1 	hold until valid (collect_idle);

#	Validate NegDryZeroScan;
#	{ msg(0,"Entering 1DMS DryZ scan"); }
#+10 { msg(0,"Still beginning 1DMS DryZ scan"); }
#+1  hold until valid (collect_idle);

#	Validate NegAmb_Z_HopScan;
#	{ msg(0,"Entering 1DMS AmbZ scan");}
#+1  hold until valid (collect_idle);


#	Validate NegDataHop_wMHP;
#	{ msg(0,"Entering Fourth Neg Data Hop"); }
#+10	{ msg(0,"Still beginning Fourth Neg Data Hop"); }
#+1 	hold until valid (collect_idle);

#	Validate NegAmbZeroHop;
#	{ msg(0,"Entering fourth Z (amb) Hop"); }
#+1 	hold until valid (collect_idle);

	Validate dither_one;
}

State dither_three {
	> Telemetry Logging Resume
	> 1200 Enable A off
	> 1200 Enable B off
	
	Validate NegDataHop_wMHP;
	{ msg(0,"Entering first Neg Data Hop"); }
+10	{ msg(0,"Still beginning first Neg Data Hop"); }
+1 	hold until valid (collect_idle);
	
	Validate NegAmbZeroHop;
	{ msg(0,"Entering first amb Zero Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering second Neg Data Hop"); }
+10	{ msg(0,"Still beginning second Neg Data Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegAmbZeroHop;
	{ msg(0,"Entering second amb Zero Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering third Neg Data Hop"); }
+10	{ msg(0,"Still beginning third Neg Data Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegAmbZeroHop;
	{ msg(0,"Entering third amb Zero Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering fourth Neg Data Hop"); }
+10	{ msg(0,"Still beginning fourth Neg Data Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegAmbZeroHop;
	{ msg(0,"Entering fourth amb Zero Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering fifth Neg Data Hop"); }
+10	{ msg(0,"Still beginning fifth Neg Data Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegAmbZeroHop;
	{ msg(0,"Entering fifth amb Zero Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering sixth Neg Data Hop"); }
+10	{ msg(0,"Still beginning sixth Neg Data Hop"); }
+1 	hold until valid (collect_idle);
	
#start dryzero and cal

	Validate NegDryZeroHop_wMHP;
	{ msg(0,"Entering first dry NegZeroHop"); }
+1	hold until valid (collect_idle);	

	Validate NegCalHop;
	{ msg(0,"Entering First Cal Hop"); }
+1	hold until valid (collect_idle);
	
	Validate NegAmbZeroHop;
	{msg(0,"Post Cal amb Z");}
+1	hold until valid (collect_idle);

#back to ambient sampling

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering seventh Neg Data Hop"); }
+10	{ msg(0,"Still beginning seventh Neg Data Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegAmbZeroHop;
	{ msg(0,"Entering sixth amb Zero Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering eighth Neg Data Hop"); }
+10	{ msg(0,"Still beginning eighth Neg Data Hop"); }
+1 	hold until valid (collect_idle);

        Validate NegAmbZeroHop;
	{ msg(0,"Entering seventh dry Zero Hop"); }
+1	hold until valid (collect_idle);

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering ninth Neg Data Hop"); }
+10	{ msg(0,"Still beginning ninth Neg Data Hop"); }
+1 	hold until valid (collect_idle);
	
	Validate NegAmbZeroHop;
	{ msg(0,"Entering eighth Zero Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering tenth Neg Data Hop"); }
+10	{ msg(0,"Still beginning tenth Neg Data Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegAmbZeroHop;
	{ msg(0,"Entering ninth Zero Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering eleventh Neg Data Hop"); }
+10	{ msg(0,"Still beginning eleventh Neg Data Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegAmbZeroHop;
	{ msg(0,"Entering tenth amb Zero Hop"); }
+1 	hold until valid (collect_idle);

	Validate NegDataHop_wMHP;
	{ msg(0,"Entering twelfth Neg Data Hop"); }
+10	{ msg(0,"Still beginning twelvth Neg Data Hop"); }
+1 	hold until valid (collect_idle);

#end cycle, repeat

validate dither_one;

## in case triple is doing a scan...
##+1  hold until ( (!D1200B) || !(H_DIO_D&2) );
##    Validate zaber_open;
##+1  hold until valid (zaber_idle);

##+1	{ msg(0,"Beginning 1st Pos Data Scan"); }
##	Validate PosDataScan;
##+1	hold until valid (collect_idle);
##	{ msg(0,"Beginning 1st Neg Data Scan"); }
##	Validate NegDataScan;
##+1	hold until valid (collect_idle);


##	Validate dither_amb_cal;
}

	State dither_dry_cal{

	> Telemetry Logging Resume
# in case triple is doing a scan...
+1  hold until ( (!D1200B) || !(H_DIO_D&2) );
	Validate zaber_open;
+1  hold until valid (zaber_idle);

	Validate flows_n2_cal;
+1  hold until valid (flows_idle);
+5	Validate cal_on;
+1  hold until valid (cal_idle);

+40	{ msg(0,"Beginning Pos Dry Cal Scan"); }
#	Validate PosCalScan; #jason 100430
+1	hold until valid (collect_idle);
	{ msg(0,"Beginning Neg Dry Cal Scan"); }
	Validate NegCalScan;
+1	hold until valid (collect_idle);

	Validate cal_off;
+1  hold until valid (cal_idle);
+5	Validate flows_measure;
+1  hold until valid (flows_idle);

+40	{ msg(0,"Beginning 9th Pos Data Scan"); }
#	Validate PosDataScan; #jason 100430
+1	hold until valid (collect_idle);
	{ msg(0,"Beginning 9th Neg Data Scan"); }
	Validate NegDataScan;
+1	hold until valid (collect_idle);

	{ msg(0,"Beginning 10th Pos Data Scan"); }
#	Validate PosDataScan; #jason 100430
+1	hold until valid (collect_idle);
	{ msg(0,"Beginning 10th Neg Data Scan"); }
	Validate NegDataScan;
+1	hold until valid (collect_idle);

	{ msg(0,"Repeating the Whole Enchilada"); }
+1	validate dither_one;

}



State dither_standby {

	{ msg(0,"Ending Dither - putting triple into standby"); }	
#	Validate HV_off;  #commented out for sharing voltage w/ tof
+2	Validate flows_stdby;
+1  hold until valid (flows_idle);
	Validate zaber_close;
+5	> Telemetry Logging Suspend
	Validate dither_end;
}	

State dither_end {
	
	{ msg(0,"Ending Dither"); }	
	Validate Init_idle;
	> 1200 enable A off
	Validate flows_idle;
	Validate cal_idle;
+1	Validate collect_idle;
#	Validate HV_off;  #commented out for sharing voltage w/ tof
	{ msg(0,"going to dither idle"); }
+2	Validate dither_idle;
}

State dither_shutdown {
	
	{ msg(0,"Shutting Dither"); }	
	> 1200 enable A off
	Validate flows_idle;
	Validate cal_idle;
+1	Validate collect_idle;
	Validate HV_off;
	{ msg(0,"going to dither idle"); }
+2	Validate dither_idle;

}

Partition
# Autocal partition for autocal

State autocal_idle {
}

State autocal_start {
      Validate flows_amb_zero;
 +1 hold until valid (flows_idle);
      Validate Pol_Negative;
 +1 hold until valid (Pol_idle);
      Validate Neg_HV_on;
 +1 hold until valid (Neg_HV_monitor);
      > 1200 Enable B off
 +1   > 1200 Enable A on
      Validate zaber_open;
 +1 hold until valid (zaber_monitor);

 +120 Validate loop_init_down_nocal;
 +1 hold until valid ( loop_idle );
 +120 Validate loop_init_up_nocal;
 +1 hold until valid ( loop_idle );
 +120  Validate flows_amb_norm;
 +1 hold until valid (flows_idle);
 +1   Validate cal_norm;
 +1 hold until valid (cal_idle);
 +360 Validate loop_init_down_cal;
 +1 hold until valid (loop_idle);
 +120 Validate loop_init_up_cal;
 +1 hold until valid (loop_idle);
 +120 validate cal_off;
 +1 Validate flows_amb_zero;
 +1 hold until valid (flows_idle);
 +120 Validate loop_init_down_nocal;
 +1 hold until valid (loop_idle);
 +120 Validate loop_init_up_nocal;
 +1 hold until valid (loop_idle);
 +120 Validate autocal_idle;
}

State autocal_stop {
 Validate loop_idle; 
 Validate autocal_idle;
 +1 Validate loop_idle;
}

Partition 
# Looping partition for autocal to change flows, etc.
%{
int z = 24;
int loop_j;
int ambi; 
int dfi;
%}


State loop_idle {
}

State loop_init_down_nocal {
   { loop_j = 0;
     Validate loop_down_nocal;
   }
}

State loop_init_down_cal {
   { loop_j = 0;
     Validate loop_down_cal;
   }
}

State loop_init_up_nocal {
   { loop_j = 0;
     Validate loop_up_nocal;
   }
}

State loop_init_up_cal {
    { loop_j = 0;
      Validate loop_up_cal;
    }
}

State loop_up_nocal {
    {
    dfi = 1745;
    ambi = 175;
    
    if ( ++loop_j > 17) {
        Validate loop_idle;
        } else {
        int stp, stp2;
        stp = dfi - ( loop_j - 1 )*z*0.916;
        stp2 = ambi + ( loop_j - 1 )*z;
        ci_sendfcmd(0,"set dilution flow %d sccm\n",stp);
        ci_sendfcmd(0,"ToF command set ambient zero flow %d sccm\n",stp2);
        }
     }
     +75 Validate loop_up_nocal;
} 


State loop_up_cal {
   {
  dfi = 1648;
  ambi = 175;
  if ( ++loop_j > 17 ) {
      Validate loop_idle;
      } else {
      int stp, stp2;
      stp = dfi - ( loop_j - 1 )*z*0.9160;
      stp2 = ambi + ( loop_j - 1 )*z;
      ci_sendfcmd(0,"set dilution flow %d sccm\n",stp);
      ci_sendfcmd(0,"ToF command set ambient zero flow %d sccm\n",stp2);
      }
   }
   +75 Validate loop_up_cal;
 
}

State loop_down_nocal {
   {
   dfi = 1405;
   ambi = 534;
   
   if ( ++loop_j > 17 ) {
      Validate loop_idle;
      } else {
      int stp, stp2;
      stp = dfi + ( loop_j - 1 )*z*0.916;
      stp2 = ambi - ( loop_j - 1 )*z;
      ci_sendfcmd(0,"set dilution flow %d sccm\n",stp);
      ci_sendfcmd(0,"ToF command set ambient zero flow %d sccm\n",stp2);
      }
    }
    +75 Validate loop_down_nocal;
}

State loop_down_cal{
   {
   dfi = 1305;
   ambi = 534;
   
   if ( ++loop_j > 17 ) {
      Validate loop_idle;
      } else {
      int stp, stp2;
      stp = dfi + ( loop_j - 1 )*z*0.916;
      stp2 = ambi - ( loop_j - 1 )*z;
      ci_sendfcmd(0,"set dilution flow %d sccm\n",stp);
      ci_sendfcmd(0,"ToF command set ambient zero flow %d sccm\n",stp2); 
      }
   }
   +75 Validate loop_down_cal;
}

